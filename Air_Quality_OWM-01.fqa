{"name":"Air Quality OWM","type":"com.fibaro.multilevelSensor","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_1040"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Label1","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_1040"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"latitude","type":"string","value":"50"},{"name":"longitude","type":"string","value":"5"},{"name":"interval","type":"string","value":"601"},{"name":"httpTimeout","type":"string","value":"5"},{"name":"debugLevel","type":"string","value":"1"},{"name":"apiKey","value":"0"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QuickApp AIR QUALITY OPENWEATHERMAP\n\n-- The QuickApp Air Quality OpenWeatherMap provides the current measurement for your location on Air Quality. \n-- Besides basic Air Quality Index the QuickApp provides also data about polluting gases such as Carbon monoxide (CO), Nitrogen monoxide (NO), Nitrogen dioxide (NO2), Ozone (O3), Sulphur dioxide (SO2), Ammonia (NH3), and particulates (PM2.5 and PM10). \n-- This QuickApp has Child Devices for Carbon monoxide (CO), Nitrogen monoxide (NO), Nitrogen dioxide (NO2), Ozone (O3), Sulphur dioxide (SO2), Ammonia (NH3), PM2.5 and PM10. \n\n\n-- Common Air Quality Index (CAQI)\n-- The Common Air Quality Index (CAQI) is an air quality index used in Europe since 2006. In November 2017, the European Environment Agency announced the European Air Quality Index (EAQI) and started encouraging its use on websites and for other ways of informing the public about air quality. \n-- As of 2012, the EU-supported project CiteairII argued that the CAQI had been evaluated on a \"large set\" of data, and described the CAQI's motivation and definition. CiteairII stated that having an air quality index that would be easy to present to the general public was a major motivation, leaving aside the more complex question of a health-based index, which would require, for example, effects of combined levels of different pollutants. The main aim of the CAQI was to have an index that would encourage wide comparison across the EU, without replacing local indices. CiteairII stated that the \"main goal of the CAQI is not to warn people for possible adverse health effects of poor air quality but to attract their attention to urban air pollution and its main source (traffic) and help them decrease their exposure.\"\n-- The CAQI is a number on a scale from 1 to 100, where a low value means good air quality and a high value means bad air quality. The index is defined in both hourly and daily versions, and separately near roads (a \"roadside\" or \"traffic\" index) or away from roads (a \"background\" index). As of 2012, the CAQI had two mandatory components for the roadside index, NO2 and PM10, and three mandatory components for the background index, NO2, PM10 and O3. It also included optional pollutants PM2.5, CO and SO2. A \"sub-index\" is calculated for each of the mandatory (and optional if available) components. The CAQI is defined as the sub-index that represents the worst quality among those components.\n\n-- Here is a description of Air Quality index levels:\n\n-- Qualitative name\tIndex\tPollutant concentration in μg/m3: \n--          Index   NO2       PM10     O3      PM25 (optional)\n-- Good        1    0-50      0-25     0-60    0-15\n-- Fair        2   50-100    25-50    60-120   15-30\n-- Moderate    3   100-200   50-90    120-180  30-55\n-- Poor        4   200-400   90-180   180-240  55-110\n-- Very Poor   5    >400      >180     >240     >110\n\n-- See more on CAQI: https://en.wikipedia.org/wiki/Air_quality_index\n\n\n-- IMPORTANT\n-- You need an API key and Polygon ID from https://home.openweathermap.org/users/sign_up\n-- The API is free up to 60 calls per minute\n\n\n-- Version 0.1 (9th October 2021)\n-- Initial version\n\n\n-- Variables (mandatory): \n-- apiKey = Get your free API key from https://agromonitoring.com\n-- latitude = latitude of your location (Default is the latitude of your HC3)\n-- longitude = longitude of your location (Default is the longitude of your HC3)\n-- interval = [number] in seconds time to get the data from the API\n-- timeout = [number] in seconds for http timeout\n-- debugLevel = Number (1=some, 2=few, 3=all, 4=simulation mode) (default = 1)\n\n\n-- Example response:\n--[[\n{\n  \"coord\":[\n    50,\n    50\n  ],\n  \"list\":[\n    {\n      \"dt\":1605182400,\n      \"main\":{\n        \"aqi\":1\n      },\n      \"components\":{\n        \"co\":201.94053649902344,\n        \"no\":0.01877197064459324,\n        \"no2\":0.7711350917816162,\n        \"o3\":68.66455078125,\n        \"so2\":0.6407499313354492,\n        \"pm2_5\":0.5,\n        \"pm10\":0.540438711643219,\n        \"nh3\":0.12369127571582794\n      }\n    }\n  ]\n} \n--]]\n\n\n-- No editing of this code is needed \n\n\nclass 'CO'(QuickAppChild)\nfunction CO:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"CO initiated, deviceId:\",self.id)\nend\nfunction CO:updateValue(data) \n  self:updateProperty(\"value\",tonumber(data.CO)) \n  self:updateProperty(\"unit\", \"µg/m³\")\n  self:updateProperty(\"log\", \" \")\nend\n\n\nclass 'NO'(QuickAppChild)\nfunction NO:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"NO initiated, deviceId:\",self.id)\nend\nfunction NO:updateValue(data) \n  self:updateProperty(\"value\",tonumber(data.NO))\n  self:updateProperty(\"unit\", \"µg/m³\")\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'NO2'(QuickAppChild)\nfunction NO2:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"NO2 initiated, deviceId:\",self.id)\nend\nfunction NO2:updateValue(data) \n  self:updateProperty(\"value\",tonumber(data.NO2))\n  self:updateProperty(\"unit\", \"µg/m³\")\n  self:updateProperty(\"log\", data.NO2_TEXT)\nend\n\n\nclass 'O3'(QuickAppChild)\nfunction O3:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"O3 initiated, deviceId:\",self.id)\nend\nfunction O3:updateValue(data) \n  self:updateProperty(\"value\",tonumber(data.O3))\n  self:updateProperty(\"unit\", \"µg/m³\")\n  self:updateProperty(\"log\", data.O3_TEXT)\nend\n\n\nclass 'SO2'(QuickAppChild)\nfunction SO2:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"SO2 initiated, deviceId:\",self.id)\nend\nfunction SO2:updateValue(data) \n  self:updateProperty(\"value\",tonumber(data.SO2))\n  self:updateProperty(\"unit\", \"µg/m³\")\n  self:updateProperty(\"log\", \" \")\nend\n\n\nclass 'NH3'(QuickAppChild)\nfunction NH3:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"NH3 initiated, deviceId:\",self.id)\nend\nfunction NH3:updateValue(data) \n  self:updateProperty(\"value\",tonumber(data.NH3))\n  self:updateProperty(\"unit\", \"µg/m³\")\n  self:updateProperty(\"log\", \" \")\nend\n\n\nclass 'PM25'(QuickAppChild)\nfunction PM25:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"PM25 initiated, deviceId:\",self.id)\nend\nfunction PM25:updateValue(data) \n  self:updateProperty(\"value\",tonumber(data.PM25))\n  self:updateProperty(\"unit\", \"µg/m³\")\n  self:updateProperty(\"log\", data.PM25_TEXT)\nend\n\n\nclass 'PM10'(QuickAppChild)\nfunction PM10:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"PM10 initiated, deviceId:\",self.id)\nend\nfunction PM10:updateValue(data) \n  self:updateProperty(\"value\",tonumber(data.PM10))\n  self:updateProperty(\"unit\", \"µg/m³\")\n  self:updateProperty(\"log\", data.PM10_TEXT)\nend\n\n\nlocal function getChildVariable(child,varName)\n  for _,v in ipairs(child.properties.quickAppVariables or {}) do\n    if v.name==varName then return v.value end\n  end\n  return \"\"\nend\n\n\n-- QuickApp functions\n\n\nfunction QuickApp:updateChildDevices() -- Update Child Devices\n  for id,child in pairs(self.childDevices) do \n    child:updateValue(data) \n  end\nend\n\n\nfunction QuickApp:logging(level,text) -- Logging function for debug messages\n  if tonumber(debugLevel) >= tonumber(level) then \n    self:debug(text)\n  end\nend\n\n\nfunction QuickApp:updateProperties() --Update properties\n  self:logging(3,\"Start updateProperties\")\n  self:updateProperty(\"value\", tonumber(data.AQI))\n  self:updateProperty(\"unit\", data.AQI_TEXT)\n  self:updateProperty(\"log\", data.DT)\nend\n\n\nfunction QuickApp:updateLabels() -- Update labels\n  self:logging(3,\"updateLabels\")\n  local labelText = \"\"\n  if debugLevel == 4 then\n    labelText = labelText ..\"SIMULATION MODE\" ..\"\\n\\n\"\n  end\n\n  labelText = labelText ..\"Basic Air Quality Index: \" ..data.AQI  ..data.AQI_TEXT ..\"\\n\\n\"\n  labelText = labelText ..\"Carbon monoxide (CO): \"    ..data.CO   ..\" µg/m³\" ..\"\\n\"\n  labelText = labelText ..\"Nitrogen monoxide (NO): \"  ..data.NO   ..\" µg/m³\" ..\"\\n\"\n  labelText = labelText ..\"Nitrogen dioxide (NO2): \"  ..data.NO2  ..\" µg/m³\" ..data.NO2_TEXT ..\"\\n\"\n  labelText = labelText ..\"Ozone (O3): \"              ..data.O3   ..\" µg/m³\" ..data.O3_TEXT ..\"\\n\"\n  labelText = labelText ..\"Sulphur dioxide (SO2): \"   ..data.SO2  ..\" µg/m³\" ..\"\\n\"\n  labelText = labelText ..\"Ammonia (NH3): \"           ..data.NH3  ..\" µg/m³\" ..\"\\n\"\n  labelText = labelText ..\"PM2.5: \"                   ..data.PM25 ..\" µg/m³\" ..data.PM25_TEXT ..\"\\n\"\n  labelText = labelText ..\"PM10: \"                    ..data.PM10 ..\" µg/m³\" ..data.PM10_TEXT ..\"\\n\\n\"\n  labelText = labelText ..\"Last update: \"             ..data.DT   ..\"\\n\" \n\n  self:logging(2,\"labelText: \" ..labelText)\n  self:updateView(\"label1\", \"text\", labelText) \nend\n\n\nfunction QuickApp:getValues() -- Get the values\n  self:logging(3,\"Start getValues\")\n  data.AQI =  string.format(\"%.0f\",jsonTable.list[1].main.aqi)\n  data.CO =   string.format(\"%.2f\",jsonTable.list[1].components.co)\n  data.NO =   string.format(\"%.2f\",jsonTable.list[1].components.no)\n  data.NO2 =  string.format(\"%.2f\",jsonTable.list[1].components.no2)\n  data.O3 =   string.format(\"%.2f\",jsonTable.list[1].components.o3)\n  data.SO2 =  string.format(\"%.2f\",jsonTable.list[1].components.so2)\n  data.NH3 =  string.format(\"%.2f\",jsonTable.list[1].components.nh3)\n  data.PM25 = string.format(\"%.2f\",jsonTable.list[1].components.pm2_5)\n  data.PM10 = string.format(\"%.2f\",jsonTable.list[1].components.pm10)\n  data.DT =   os.date(\"%d-%m-%Y %H:%M\", tonumber(jsonTable.list[1].dt))\n \n  if data.AQI == \"1\" then\n    data.AQI_TEXT = \" (Good)\"\n  elseif data.AQI == \"2\" then\n    data.AQI_TEXT = \" (Fair)\"\n  elseif data.AQI == \"3\" then\n    data.AQI_TEXT = \" (Moderate)\"\n  elseif data.AQI == \"4\" then\n    data.AQI_TEXT = \" (Poor)\"\n  elseif data.AQI == \"5\" then\n    data.AQI_TEXT = \" (Very Poor)\"\n  end\n  \n  if tonumber(data.NO2) <= 50 then\n    data.NO2_TEXT = \" (Good)\"\n  elseif tonumber(data.NO2) > 50 and tonumber(data.NO2) <= 100 then\n    data.NO2_TEXT = \" (Fair)\"\n  elseif tonumber(data.NO2) > 100 and tonumber(data.NO2) <= 200 then\n    data.NO2_TEXT = \" (Moderate)\"\n  elseif tonumber(data.NO2) > 200 and tonumber(data.NO2) <= 400 then\n    data.NO2_TEXT = \" (Poor)\"\n  elseif tonumber(data.NO2) > 400 then\n    data.NO2_TEXT = \" (Very Poor)\"\n  end\n  \n  if tonumber(data.O3) <= 60 then\n    data.O3_TEXT = \" (Good)\"\n  elseif tonumber(data.O3) > 60 and tonumber(data.O3) <= 120 then\n    data.O3_TEXT = \" (Fair)\"\n  elseif tonumber(data.O3) > 120 and tonumber(data.O3) <= 180 then\n    data.O3_TEXT = \" (Moderate)\"\n  elseif tonumber(data.O3) > 180 and tonumber(data.O3) <= 240 then\n    data.O3_TEXT = \" (Poor)\"\n  elseif tonumber(data.O3) > 240 then\n    data.O3_TEXT = \" (Very Poor)\"\n  end\n  \n  if tonumber(data.PM25) <= 60 then\n    data.PM25_TEXT = \" (Good)\"\n  elseif tonumber(data.PM25) > 60 and tonumber(data.PM25) <= 120 then\n    data.PM25_TEXT = \" (Fair)\"\n  elseif tonumber(data.PM25) > 120 and tonumber(data.PM25) <= 180 then\n    data.PM25_TEXT = \" (Moderate)\"\n  elseif tonumber(data.PM25) > 180 and tonumber(data.PM25) <= 240 then\n    data.PM25_TEXT = \" (Poor)\"\n  elseif tonumber(data.PM25) > 240 then\n    data.PM25_TEXT = \" (Very Poor)\"\n  end\n  \n  if tonumber(data.PM10) <= 25 then\n    data.PM10_TEXT = \" (Good)\"\n  elseif tonumber(data.PM10) > 25 and tonumber(data.PM10) <= 50 then\n    data.PM10_TEXT = \" (Fair)\"\n  elseif tonumber(data.PM10) > 50 and tonumber(data.PM10) <= 90 then\n    data.PM10_TEXT = \" (Moderate)\"\n  elseif tonumber(data.PM10) > 90 and tonumber(data.PM10) <= 180 then\n    data.PM10_TEXT = \" (Poor)\"\n  elseif tonumber(data.PM10) > 180 then\n    data.PM10_TEXT = \" (Very Poor)\"\n  end\n  \nend\n\n\nfunction QuickApp:simData() -- Simulate Agro Monitoring API\n  self:logging(3,\"Start Simulation mode\")\n  local apiResult = '{\"coord\":[50,50],\"list\":[{\"dt\":1605182400,\"main\":{\"aqi\":1},\"components\":{\"co\":201.94053649902344,\"no\":0.01877197064459324,\"no2\":0.7711350917816162,\"o3\":68.66455078125,\"so2\":0.6407499313354492,\"pm2_5\":0.5,\"pm10\":0.540438711643219,\"nh3\":0.12369127571582794}}]}'\n  self:logging(3,\"apiResult: \" ..apiResult)\n\n  jsonTable = json.decode(apiResult) -- Decode the json string from api to lua-table \n  \n  self:getValues() -- Update the Values\n  self:updateLabels() -- Update the Labels\n  self:updateProperties() -- Update the Properties\n  self:updateChildDevices() -- Update the Child Devices\n  \n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() \n     self:simData()\n  end)\nend\n\n\nfunction QuickApp:getData()\n  self:logging(3,\"Start getData\")\n  self:logging(2,\"URL: \" ..address)\n\n  self.http:request(address, {\n    options = {data = Method, method = \"GET\", headers = {[\"Content-Type\"] = \"application/json\",[\"Accept\"] = \"application/json\",}},\n\n      success = function(response)\n        self:logging(3,\"response status: \" ..response.status)\n        self:logging(3,\"headers: \" ..response.headers[\"Content-Type\"])\n        self:logging(2,\"Response data: \" ..response.data)\n\n        if response.data == nil or response.data == \"\" or response.data == \"[]\" or response.status > 200 then -- Check for empty result\n          self:warning(\"Temporarily no data from OpenWeatherMap.org\")\n          return \n        end\n\n        jsonTable = json.decode(response.data) -- JSON decode from api to lua-table\n\n        self:getValues() -- Update the Values\n        self:updateLabels() -- Update the Labels\n        self:updateProperties() -- Update the Properties\n        self:updateChildDevices() -- Update the Child Devices\n\n      end,\n      error = function(error)\n        self:error('error: ' ..json.encode(error))\n        self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n      end\n    }) \n\n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout((interval)*1000, function() \n     self:getData()\n  end)\nend\n\n\nfunction QuickApp:createVariables() -- Get all Variables or create them\n  self:logging(3,\"Start createVariables\")\n  data = {}\n  data.AQI = \"0\"\n  data.CO = \"0\"\n  data.NO = \"0\"\n  data.NO2 = \"0\"\n  data.SO2 = \"0\"\n  data.NH3 = \"0\"\n  data.PM25 = \"0\"\n  data.PM10 = \"0\"\n  data.O3 = \"0\"\n  data.DT = \"0\"\n  data.AQI_TEXT = \"\"\n  data.CO_TEXT = \"\"\n  data.NO_TEXT = \"\"\n  data.O3_TEXT = \"\"\n  data.SO2_TEXT = \"\"\n  data.NH3_TEXT = \"\"\n  data.PM25_TEXT = \"\"\n  data.PM10_TEXT = \"\"\nend\n\n\nfunction QuickApp:getQuickAppVariables() -- Get all QuickApp Variables \n  local apiKey = self:getVariable(\"apiKey\")\n  local latitude = tonumber(self:getVariable(\"latitude\"))\n  local longitude = tonumber(self:getVariable(\"longitude\"))\n  interval = tonumber(self:getVariable(\"interval\")) \n  httpTimeout = tonumber(self:getVariable(\"httpTimeout\")) \n  debugLevel = tonumber(self:getVariable(\"debugLevel\"))\n\n  if apiKey ==\"\" or apiKey == nil then\n    apiKey = \"0\" \n    self:setVariable(\"apiKey\",apiKey)\n    self:trace(\"Added QuickApp variable apiKey\")\n  end\n  if latitude == 0 or latitude == nil then \n    latitude = string.format(\"%.2f\",api.get(\"/settings/location\")[\"latitude\"]) -- Default latitude of your HC3\n    self:setVariable(\"latitude\", latitude)\n    self:trace(\"Added QuickApp variable latitude with default value \" ..latitude)\n  end  \n  if longitude == 0 or longitude == nil then\n    longitude = string.format(\"%.2f\",api.get(\"/settings/location\")[\"longitude\"]) -- Default longitude of your HC3\n    self:setVariable(\"longitude\", longitude)\n    self:trace(\"Added QuickApp variable longitude with default value \" ..longitude)\n  end\n  if interval == \"\" or interval == nil then\n    interval = \"601\" \n    self:setVariable(\"interval\",interval)\n    self:trace(\"Added QuickApp variable interval\")\n    interval = tonumber(interval)\n  end  \n  if httpTimeout == \"\" or httpTimeout == nil then\n    httpTimeout = \"5\" -- timeoout in seconds\n    self:setVariable(\"httpTimeout\",httpTimeout)\n    self:trace(\"Added QuickApp variable httpTimeout\")\n    httpTimeout = tonumber(httpTimeout)\n  end\n  if debugLevel == \"\" or debugLevel == nil then\n    debugLevel = \"1\" -- Default value for debugLevel response in seconds\n    self:setVariable(\"debugLevel\",debugLevel)\n    self:trace(\"Added QuickApp variable debugLevel\")\n    debugLevel = tonumber(debugLevel)\n  end\n  if apiKey == nil or apiKey == \"\"  or apiKey ==\"0\" then -- Check mandatory API key \n    self:error(\"API key is empty! Get your free API key from https://openweathermap.org\")\n    self:warning(\"No API Key: Switched to Simulation Mode\")\n    debugLevel = 4 -- Simulation mode due to empty API key\n  end\n  address = \"http://api.openweathermap.org/data/2.5/air_pollution?lat=\" ..latitude ..\"&lon=\" ..longitude ..\"&appid=\" ..apiKey -- Combine webaddress, location info and API key\nend\n\n\nfunction QuickApp:setupChildDevices() -- Setup Child Devices\n  local cdevs = api.get(\"/devices?parentId=\"..self.id) or {} -- Pick up all Child Devices\n  function self:initChildDevices() end -- Null function, else Fibaro calls it after onInit()...\n\n  if #cdevs == 0 then -- If no Child Devices, create them\n    local initChildData = { \n      {className=\"CO\",   name=\"Carbon monoxide\",   type=\"com.fibaro.multilevelSensor\", value=0},\n      {className=\"NO\",   name=\"Nitrogen monoxide\", type=\"com.fibaro.multilevelSensor\", value=0},\n      {className=\"NO2\",  name=\"Nitrogen dioxide\",  type=\"com.fibaro.multilevelSensor\", value=0},\n      {className=\"O3\",   name=\"Ozone\",             type=\"com.fibaro.multilevelSensor\", value=0},\n      {className=\"SO2\",  name=\"Sulphur dioxide\",   type=\"com.fibaro.multilevelSensor\", value=0},\n      {className=\"NH3\",  name=\"Ammonia\",           type=\"com.fibaro.multilevelSensor\", value=0},\n      {className=\"PM25\", name=\"PM2.5\",             type=\"com.fibaro.multilevelSensor\", value=0},\n      {className=\"PM10\", name=\"PM10\",              type=\"com.fibaro.multilevelSensor\", value=0},\n    }\n    for _,c in ipairs(initChildData) do\n      local child = self:createChildDevice(\n        {name = c.name,\n          type=c.type,\n          value=c.value,\n          unit=c.unit,\n          initialInterfaces = {},\n        },\n        _G[c.className] -- Fetch class constructor from class name\n      )\n      child:setVariable(\"className\",c.className)  -- Save class name so we know when we load it next time\n    end   \n  else \n    for _,child in ipairs(cdevs) do\n      local className = getChildVariable(child,\"className\") -- Fetch child class name\n      local childObject = _G[className](child) -- Create child object from the constructor name\n      self.childDevices[child.id]=childObject\n      childObject.parent = self -- Setup parent link to device controller \n    end\n  end\nend \n\n\nfunction QuickApp:onInit()\n  __TAG = fibaro.getName(plugin.mainDeviceId) ..\" ID:\" ..plugin.mainDeviceId\n  self:debug(\"onInit\") \n\n  self:setupChildDevices() -- Setup the Child Devices\n  self:getQuickAppVariables() -- Get Quickapp Variables or create them\n  self:createVariables() -- Create Variables\n\n  self.http = net.HTTPClient({timeout=httpTimeout*1000})\n\n  if tonumber(debugLevel) >= 4 then \n    self:simData() -- Go in simulation\n  else\n    self:getData() -- Get data from API\n  end\nend\n\n--EOF"}]}